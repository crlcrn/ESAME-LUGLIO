from database.DB_connect import DBConnect
from model.gene import Gene
from model.interaction import Interaction


class DAO():

    @staticmethod
    def get_all_genes():
        cnx = DBConnect.get_connection()
        result = []
        if cnx is None:
            print("Connessione fallita")
        else:
            cursor = cnx.cursor(dictionary=True)
            query = """SELECT * 
                    FROM genes"""
            cursor.execute(query)

            for row in cursor:
                result.append(Gene(**row))

            cursor.close()
            cnx.close()
        return result

    @staticmethod
    def get_all_interactions():
        cnx = DBConnect.get_connection()
        result = []
        if cnx is None:
            print("Connessione fallita")
        else:
            cursor = cnx.cursor(dictionary=True)
            query = """SELECT * 
                       FROM interactions"""
            cursor.execute(query)

            for row in cursor:
                result.append(Interaction(**row))

            cursor.close()
            cnx.close()
        return result

    @staticmethod
    def get_all_chromosomes():
        cnx = DBConnect.get_connection()
        result = []
        if cnx is None:
            print("Connessione fallita")
        else:
            cursor = cnx.cursor(dictionary=True)
            query = """SELECT DISTINCT g.Chromosome  
                        FROM genes g
                        ORDER BY g.Chromosome ASC"""
            cursor.execute(query)

            for row in cursor:
                result.append(row["Chromosome"])

            cursor.close()
            cnx.close()
        return result

    @staticmethod
    def get_nodes(ch_min, ch_max):
        cnx = DBConnect.get_connection()
        result = []
        if cnx is None:
            print("Connessione fallita")
        else:
            cursor = cnx.cursor(dictionary=True)
            query = """SELECT *  
                        FROM genes g
                        WHERE g.Chromosome >= %s AND g.Chromosome <= %s"""

            cursor.execute(query, (ch_min, ch_max))

            for row in cursor:
                result.append(Gene(**row))

            cursor.close()
            cnx.close()
        return result

    @staticmethod
    def get_edges(ch_min, ch_max):
        cnx = DBConnect.get_connection()
        result = []
        if cnx is None:
            print("Connessione fallita")
        else:
            cursor = cnx.cursor()
            query = """
            SELECT g1.GeneID AS GeneID1, 
                            g2.GeneID AS GeneID2, 
                            i.Expression_Corr AS CorrelationIndex, 
                            g1.Chromosome AS Chromosome1, 
                            g2.Chromosome AS Chromosome2
            FROM 
                genes g1, genes g2, classification c1, classification c2, interactions i
            WHERE 
                g1.Chromosome >= %s AND g1.Chromosome <= %s 
                AND g2.Chromosome >= %s AND g2.Chromosome <= %s
                AND g1.GeneID != g2.GeneID
                AND g1.GeneID = c1.GeneID
                AND g2.GeneID = c2.GeneID
                AND c1.Localization = c2.Localization
                AND ((i.GeneID1 = g1.GeneID AND i.GeneID2 = g2.GeneID) OR 
                     (i.GeneID1 = g2.GeneID AND i.GeneID2 = g1.GeneID));
            """
            cursor.execute(query, (ch_min, ch_max, ch_min, ch_max))
            for row in cursor:
                result.append((row[0], row[1], row[2], row[3], row[4]))
            cursor.close()
            cnx.close()
        return result
